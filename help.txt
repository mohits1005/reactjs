1) Setup
npx create-react-app sample_react
cd sample_react
npm start
2)
simple dom - index.html
src > index.js > make component and shove it into html
3) Babel > babeljs.io converts template code(jsx) to ugly(js) code
4) Define state of a component inside class based template using constructor
5) Use setState method to modify the state object
6) Containers are components that have access to state
7) Redux
components in react-redux are similar to those in vanilla react
The container is the function (usually in a separate file) which gives the component props the special ability to interact with state
- mapStateToProps, used to link a property of the state object with a prop in the component
redux - application state and react -view to display state
application state is generated by reducer functions
- Button Click calls Action Creator
- Action Creator returns an action
- Action automatically sent to reducer
- Active Book Reducer changes state
- Containers will render the new props
8) Add .bind(this) to bind context to a function, should be done inside constructor
9) Middleware
Action -> Middleware(Manipulate action, log action or stop action) -> Reducer
redux-promise (npm)
redux-promise unwraps promise for us
10) React sparklines (npm)
11) react-router
"History" listens for any change in url, if it's changes it informs ReactRouter
12) redux-form
step 1: user informs redux-form about form name and fields
step 2: inform redux-form to handle submission of form
step 3: Define field with name(req.)
Step 4: Define component of the field with key as name of field and value as input field jsx
13) Bootstrap
npm install --save bootstrap
import 'bootstrap/dist/css/bootstrap.css'; in src > index.js
14) React router
npm i --save react-router-dom
index.js > import { BrowserRouter, Switch, Route, NavLink } from 'react-router-dom';
ReactDOM.render(
    <BrowserRouter>
        <Switch>
            <Route exact path="/" component={App} />
            <Route exact path="/detail/:id" component={PostDetail} />
        </Switch>
    </BrowserRouter>
, document.getElementById('root'));
15) In case of class, it extends component or React.component and use render function
In case of function, it doesn’t extends neither has render function just return
16) Context
const MyContext = React.createContext(defaultValue);
When React renders a component that subscribes to this Context object it will read the current context value from the closest matching Provider above it in the tree.
<MyContext.Provider value={/* some value */}>
Every Context object comes with a Provider React component that allows consuming components to subscribe to context changes.
All consumers that are descendants of a Provider will re-render whenever the Provider’s value prop changes.
MyClass.contextType = MyContext
This lets you consume the nearest current value of that Context type using this.context. 
imp: 
a) createContext
b) context.Provider value=""
c) class.contextType = context
d) this.context 

